import os
import numpy as np
from PIL import Image, ImageOps
from alive_progress import alive_bar


class Error:
    class NoImagesFound(Exception):
        pass


class Blurer:
    def __init__(self, debug: bool = False, size: int = 3):
        self.images = self.find_image()
        self.debug = debug
        self.size = size
        self.process_image(self.images)

    def find_image(self) -> list:
        file_formats = ['png', 'jpeg', 'jpg']
        files = list()
        input_directory = "input"
        for file in os.listdir(input_directory):
            if file.split(".")[1] in file_formats:
                image = Image.open(os.path.join(os.getcwd(), input_directory, file))
                width, height = image.size
                if width < 3 or height < 3:
                    print("Minimum size of an supported image is 3x3! Skipping...")
                    continue
                files.append(os.path.join(os.getcwd(), "input", file))

        if files:
            return files

        raise Error.NoImagesFound(f"No images could be found the {input_directory}. "
                                  f"Accepted File Formats: {' '.join(file_formats)}")

    def scan_pixels_math(self, x, y, width, height, mode) -> tuple:

        if mode == 3:
            # Top Row
            tlc = (x - 1 if x - 1 >= 0 else 0, y - 1 if y - 1 >= 0 else 0)
            tm = (x, y - 1 if y - 1 >= 0 else 0)
            trc = (x + 1 if x + 1 < width else width - 1, y - 1 if y - 1 >= 0 else 0)

            # Middle Row
            ml = (x - 1 if x - 1 >= 0 else 0, y)
            mm = (x, y)
            mr = (x + 1 if x + 1 < width else width - 1, y)

            # Bottom Row
            blc = (x - 1 if x - 1 >= 0 else 0, y + 1 if y + 1 < height else height - 1)
            bm = (x, y + 1 if y + 1 < height else height - 1)
            brc = (x + 1 if x + 1 < width else width - 1, y + 1 if y + 1 < height else height - 1)

            return (
                tlc, tm, trc,
                ml, mm, mr,
                blc, bm, brc
            )
        elif mode == 5:
            # Generated by chatGPT cuz FUCK THAT
            # Top Row
            tlc = (x - 2 if x - 2 >= 0 else 0, y - 2 if y - 2 >= 0 else 0)
            tl = (x - 1 if x - 1 >= 0 else 0, y - 2 if y - 2 >= 0 else 0)
            tm = (x, y - 2 if y - 2 >= 0 else 0)
            tr = (x + 1 if x + 1 < width else width - 1, y - 2 if y - 2 >= 0 else 0)
            trc = (x + 2 if x + 2 < width else width - 1, y - 2 if y - 2 >= 0 else 0)

            # Upper Middle Row
            ul = (x - 2 if x - 2 >= 0 else 0, y - 1 if y - 1 >= 0 else 0)
            uml = (x - 1 if x - 1 >= 0 else 0, y - 1 if y - 1 >= 0 else 0)
            um = (x, y - 1 if y - 1 >= 0 else 0)
            umr = (x + 1 if x + 1 < width else width - 1, y - 1 if y - 1 >= 0 else 0)
            ur = (x + 2 if x + 2 < width else width - 1, y - 1 if y - 1 >= 0 else 0)

            # Middle Row
            ml = (x - 2 if x - 2 >= 0 else 0, y)
            mml = (x - 1 if x - 1 >= 0 else 0, y)
            mm = (x, y)
            mmr = (x + 1 if x + 1 < width else width - 1, y)
            mr = (x + 2 if x + 2 < width else width - 1, y)

            # Lower Middle Row
            ll = (x - 2 if x - 2 >= 0 else 0, y + 1 if y + 1 < height else height - 1)
            lml = (x - 1 if x - 1 >= 0 else 0, y + 1 if y + 1 < height else height - 1)
            lm = (x, y + 1 if y + 1 < height else height - 1)
            lmr = (x + 1 if x + 1 < width else width - 1, y + 1 if y + 1 < height else height - 1)
            lr = (x + 2 if x + 2 < width else width - 1, y + 1 if y + 1 < height else height - 1)

            # Bottom Row
            blc = (x - 2 if x - 2 >= 0 else 0, y + 2 if y + 2 < height else height - 1)
            bl = (x - 1 if x - 1 >= 0 else 0, y + 2 if y + 2 < height else height - 1)
            bm = (x, y + 2 if y + 2 < height else height - 1)
            br = (x + 1 if x + 1 < width else width - 1, y + 2 if y + 2 < height else height - 1)
            brc = (x + 2 if x + 2 < width else width - 1, y + 2 if y + 2 < height else height - 1)

            return (
                tlc, tl, tm, tr, trc,
                ul, uml, um, umr, ur,
                ml, mml, mm, mmr, mr,
                ll, lml, lm, lmr, lr,
                blc, bl, bm, br, brc
            )

    def process_image(self, images):
        for path in images:
            print(f"Working on {os.path.basename(path)}  ...")
            image = Image.open(path)
            width, height = image.size

            # Convert it to grayscale, for simplicity
            image = ImageOps.grayscale(image)

            img_array = np.array(image)

            # Create a copy of the array to store the blurred image
            blurred_array = np.empty_like(img_array, dtype=np.uint8)

            cursor = (0, 0)
            with alive_bar(width * height, title="Image Processing") as bar:
                for y in range(height):
                    for x in range(width):
                        current_scan_pixels = self.scan_pixels_math(x, y, width, height, self.size)
                        neighborhood_sum = 0

                        for scanned_pixel in current_scan_pixels:
                            sx, sy = scanned_pixel
                            neighborhood_sum += img_array[sy, sx]

                        blurred_array[y, x] = neighborhood_sum // 9

                        cursor = (x + 1 if x + 1 < width else 0, y + 1 if x + 1 >= width else y)

                        bar()

            # Convert the NumPy array back to an Image
            blurred_image = Image.fromarray(blurred_array)

            if not os.path.exists(os.path.join(os.getcwd(), "output")):
                os.mkdir("output")

            blurred_image.save(fp=os.path.join(os.getcwd(), "output", os.path.basename(path)))
            print("Finished Image!!!")


if __name__ == "__main__":
    size = input("Enter Size, the bigger the weirder. (either 3 or 5): ")
    try:
        size = int(size)
        if size != 3 and size != 5:
            size = 3
    except ValueError:
        print("Error Getting size, defaulting to 3.")

    b = Blurer(False, size)
